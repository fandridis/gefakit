name: Deploy Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

# Add permissions block
permissions:
  contents: read
  pull-requests: write

# Add custom run name
run-name: "Deploy Preview: ${{ github.head_ref }}"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.generate_env_name.outputs.ENV_NAME }}
      worker_name: ${{ steps.generate_env_name.outputs.WORKER_NAME }}
      db_branch_name: ${{ steps.generate_env_name.outputs.DB_BRANCH_NAME }}
      db_url: ${{ steps.create_db_branch.outputs.db_url }}
    steps:
      - name: Generate environment name
        id: generate_env_name
        run: |
          # Convert to lowercase and replace any non-alphanumeric chars with dashes
          ENV_NAME=$(echo "${{ github.head_ref }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-//;s/-$//')
          echo "ENV_NAME=$ENV_NAME" >> $GITHUB_OUTPUT
          echo "DB_BRANCH_NAME=deploy-preview-$ENV_NAME" >> $GITHUB_OUTPUT
          echo "WORKER_NAME=deploy-preview-$ENV_NAME" >> $GITHUB_OUTPUT
          
          # Debug logging
          echo "Original branch name: ${{ github.head_ref }}"
          echo "Generated ENV_NAME: $ENV_NAME"
          echo "Generated WORKER_NAME: deploy-preview-$ENV_NAME"

      - name: Create Neon Database Branch for Preview
        id: create_db_branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ secrets.NEON_PROJECT_ID }}
          branch_name: ${{ steps.generate_env_name.outputs.DB_BRANCH_NAME }}
          parent: 'production'
          username: 'neondb_owner'
          api_key: ${{ secrets.NEON_API_KEY }}

  deploy-api:
    needs: setup
    runs-on: ubuntu-latest
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Wrangler
        run: npm install -g wrangler@4.10.0

      - name: Deploy API preview
        env:
          ENV_NAME: ${{ needs.setup.outputs.env_name }}
          WORKER_NAME: ${{ needs.setup.outputs.worker_name }}
        run: |
          cd apps/api
          echo "Deploying API worker with name: ${WORKER_NAME}-api"
          wrangler deploy --name="${WORKER_NAME}-api" --var APP_URL:"https://${WORKER_NAME}-web.fandridis.workers.dev"

      - name: Push preview secrets
        env:
          ENV_NAME: ${{ needs.setup.outputs.env_name }}
          WORKER_NAME: ${{ needs.setup.outputs.worker_name }}
        run: |
          DB_URL="${{ needs.setup.outputs.db_url }}"

          # Fallback only if for some reason it's empty
          if [ -z "$DB_URL" ]; then
            DB_URL=$(
              curl -s -H "Authorization: Bearer ${{ secrets.NEON_API_KEY }}" \
                https://console.neon.tech/api/v2/projects/${{ secrets.NEON_PROJECT_ID }}/branches/${ENV_NAME} \
              | jq -r '.connectionString'
            )
          fi

          echo "$DB_URL" | wrangler secret put DATABASE_URL --name "${WORKER_NAME}-api"
          echo "$DB_URL" | wrangler secret put TEST_DATABASE_URL --name "${WORKER_NAME}-api"
          echo "development" | wrangler secret put NODE_ENV --name "${WORKER_NAME}-api"

          echo "DATABASE_URL=$DB_URL"      >> $GITHUB_ENV
          echo "TEST_DATABASE_URL=$DB_URL" >> $GITHUB_ENV
          echo "NODE_ENV=test"             >> $GITHUB_ENV

      - name: Run API tests
        env:
          DATABASE_URL:      ${{ env.DATABASE_URL }}
          TEST_DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
          NODE_ENV:          ${{ env.NODE_ENV }}
          NEON_API_KEY:      ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID:   ${{ secrets.NEON_PROJECT_ID }}
          APP_URL:           ${{ format('https://{0}-web.fandridis.workers.dev', needs.setup.outputs.worker_name) }}
        run: |
          cd apps/api
          npm run test

  deploy-web:
    needs: [setup, deploy-api]
    runs-on: ubuntu-latest
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Wrangler
        run: npm install -g wrangler@4.10.0

      - name: Build web with preview API URL
        env:
          API_URL: ${{ format('https://{0}-api.fandridis.workers.dev', needs.setup.outputs.worker_name) }}
          VITE_API_URL: ${{ format('https://{0}-api.fandridis.workers.dev', needs.setup.outputs.worker_name) }}
          CLOUDFLARE_ENV: development
          VITE_NODE_ENV: development
        run: |
          cd apps/web
          npm run build:development

      - name: Deploy web preview
        env:
          ENV_NAME: ${{ needs.setup.outputs.env_name }}
          WORKER_NAME: ${{ needs.setup.outputs.worker_name }}
        run: |
          cd apps/web
          echo "Deploying web worker with name: ${WORKER_NAME}-web"
          wrangler deploy --name="${WORKER_NAME}-web"

  comment-pr:
    needs: [deploy-api, deploy-web]
    runs-on: ubuntu-latest
    steps:
      - name: Comment PR with preview URLs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const envName = '${{ needs.setup.outputs.env_name }}';
            const workerName = '${{ needs.setup.outputs.worker_name }}';
            const webUrl = `https://${workerName}-web.fandridis.workers.dev`;
            const apiUrl = `https://${workerName}-api.fandridis.workers.dev`;
            
            // Get the latest commit message
            const commits = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            const latestCommit = commits.data[commits.data.length - 1];
            
            let message = `## ðŸš€ Preview Deployment\n\n` +
              `Latest commit: ${latestCommit.commit.message}\n\n` +
              `Your changes have been deployed to preview environments:\n\n` +
              `- Web: ${webUrl}\n` +
              `- API: ${apiUrl}\n` +
              `\nThese previews will be automatically deleted when the PR is closed.`;
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.startsWith('## ðŸš€ Preview Deployment')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: message
              });
            } else {
              // Create new comment if none exists
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });
            }