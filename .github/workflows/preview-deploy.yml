# .github/workflows/preview-deploy.yml
# Required GitHub Secrets and Cloudflare API Token permissions:
#   - Secrets: CLOUDFLARE_API_TOKEN, CLOUDFLARE_ACCOUNT_ID
#   - CLOUDFLARE_API_TOKEN must have:
#       • User -> User Details -> Read
#       • Account -> Workers Scripts -> Write
#       • Account -> Workers Services -> Write
#       • Account -> Workers Routes -> Edit (if using routes)
#       • (Optional) Account -> Account Settings -> Read for some deploy commands
# Triggers on pull requests to main
# Deploys API preview (only if API changed), captures its URL, then builds & deploys web preview with that URL
name: Deploy Preview

on:
  pull_request:
    branches:
      - main

jobs:
  preview:
    runs-on: ubuntu-latest
    env:
      # Cloudflare credentials stored in repo secrets
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # need full history to diff against main
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Check for API changes
        id: api_changes
        run: |
          # compare this branch against main for any changes under apps/api/
          git fetch origin main
          if git diff --quiet origin/main...HEAD -- apps/api/; then
            echo "hasApiChanges=false" >> $GITHUB_OUTPUT
          else
            echo "hasApiChanges=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Wrangler
        run: npm install -g wrangler@4.10.0

      # ─────────────────────────────────────────────────────────────────────────────
      # Dynamic Wrangler config generation for branch-based env names
      - name: Generate environment name
        id: generate_env_name
        if: steps.api_changes.outputs.hasApiChanges == 'true'
        run: |
          # sanitize branch to be alphanumeric + dashes only
          BRANCH=$(echo "${{ github.head_ref }}" | sed 's/[^a-zA-Z0-9-]/-/g')
          echo "ENV_NAME=$BRANCH" >> $GITHUB_OUTPUT

      - name: Create dynamic wrangler.toml
        if: steps.api_changes.outputs.hasApiChanges == 'true'
        run: |
          # Basic static fields from your original wrangler.toml
          cat > wrangler.generated.toml <<EOF
          name = "gefakit-api"
          type = "javascript"
          account_id = "${{ env.CLOUDFLARE_ACCOUNT_ID }}"
          workers_dev = true

          [env.${{ steps.generate_env_name.outputs.ENV_NAME }}]
          name = "gefakit-api-${{ steps.generate_env_name.outputs.ENV_NAME }}"
          workers_dev = true
          EOF

      - name: Deploy API preview
        if: steps.api_changes.outputs.hasApiChanges == 'true'
        run: |
          npx wrangler deploy \
            --config wrangler.generated.toml \
            --env ${{ steps.generate_env_name.outputs.ENV_NAME }}

      # ─────────────────────────────────────────────────────────────────────────────

      - name: Set default API URL
        if: steps.api_changes.outputs.hasApiChanges == 'false'
        run: |
          echo "PREVIEW_API_URL=https://gefakit-api-production.fandridis.workers.dev" >> $GITHUB_ENV

      - name: Capture API preview URL
        if: steps.api_changes.outputs.hasApiChanges == 'true'
        run: |
          # Wrangler will print the URL as the last line; capture it from stdout
          PREVIEW_URL=$(npx wrangler deploy \
            --config wrangler.generated.toml \
            --env ${{ steps.generate_env_name.outputs.ENV_NAME }} \
            | tail -n1)
          echo "PREVIEW_API_URL=$PREVIEW_URL" >> $GITHUB_ENV

      - name: Build web with preview API URL
        env:
          API_URL: ${{ env.PREVIEW_API_URL }}
        run: |
          cd apps/web
          npm run build:development

      - name: Deploy web preview
        run: |
          cd apps/web
          npm run deploy:development
