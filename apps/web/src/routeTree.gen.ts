/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VerifyEmailImport } from './routes/verify-email'
import { Route as ResetPasswordImport } from './routes/reset-password'
import { Route as RequestPasswordResetImport } from './routes/request-password-reset'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as ProtectedRouteImport } from './routes/_protected/route'
import { Route as GodModeRouteImport } from './routes/_god-mode/route'
import { Route as IndexImport } from './routes/index'
import { Route as ProtectedDashboardImport } from './routes/_protected/dashboard'
import { Route as GodModeGodModeImport } from './routes/_god-mode/god-mode'
import { Route as ProtectedSettingsProfileImport } from './routes/_protected/settings/profile'

// Create/Update Routes

const VerifyEmailRoute = VerifyEmailImport.update({
  id: '/verify-email',
  path: '/verify-email',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordRoute = ResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const RequestPasswordResetRoute = RequestPasswordResetImport.update({
  id: '/request-password-reset',
  path: '/request-password-reset',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRouteRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const GodModeRouteRoute = GodModeRouteImport.update({
  id: '/_god-mode',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedDashboardRoute = ProtectedDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => ProtectedRouteRoute,
} as any)

const GodModeGodModeRoute = GodModeGodModeImport.update({
  id: '/god-mode',
  path: '/god-mode',
  getParentRoute: () => GodModeRouteRoute,
} as any)

const ProtectedSettingsProfileRoute = ProtectedSettingsProfileImport.update({
  id: '/settings/profile',
  path: '/settings/profile',
  getParentRoute: () => ProtectedRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_god-mode': {
      id: '/_god-mode'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof GodModeRouteImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/request-password-reset': {
      id: '/request-password-reset'
      path: '/request-password-reset'
      fullPath: '/request-password-reset'
      preLoaderRoute: typeof RequestPasswordResetImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/verify-email': {
      id: '/verify-email'
      path: '/verify-email'
      fullPath: '/verify-email'
      preLoaderRoute: typeof VerifyEmailImport
      parentRoute: typeof rootRoute
    }
    '/_god-mode/god-mode': {
      id: '/_god-mode/god-mode'
      path: '/god-mode'
      fullPath: '/god-mode'
      preLoaderRoute: typeof GodModeGodModeImport
      parentRoute: typeof GodModeRouteImport
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardImport
      parentRoute: typeof ProtectedRouteImport
    }
    '/_protected/settings/profile': {
      id: '/_protected/settings/profile'
      path: '/settings/profile'
      fullPath: '/settings/profile'
      preLoaderRoute: typeof ProtectedSettingsProfileImport
      parentRoute: typeof ProtectedRouteImport
    }
  }
}

// Create and export the route tree

interface GodModeRouteRouteChildren {
  GodModeGodModeRoute: typeof GodModeGodModeRoute
}

const GodModeRouteRouteChildren: GodModeRouteRouteChildren = {
  GodModeGodModeRoute: GodModeGodModeRoute,
}

const GodModeRouteRouteWithChildren = GodModeRouteRoute._addFileChildren(
  GodModeRouteRouteChildren,
)

interface ProtectedRouteRouteChildren {
  ProtectedDashboardRoute: typeof ProtectedDashboardRoute
  ProtectedSettingsProfileRoute: typeof ProtectedSettingsProfileRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedDashboardRoute: ProtectedDashboardRoute,
  ProtectedSettingsProfileRoute: ProtectedSettingsProfileRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/request-password-reset': typeof RequestPasswordResetRoute
  '/reset-password': typeof ResetPasswordRoute
  '/verify-email': typeof VerifyEmailRoute
  '/god-mode': typeof GodModeGodModeRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/settings/profile': typeof ProtectedSettingsProfileRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/request-password-reset': typeof RequestPasswordResetRoute
  '/reset-password': typeof ResetPasswordRoute
  '/verify-email': typeof VerifyEmailRoute
  '/god-mode': typeof GodModeGodModeRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/settings/profile': typeof ProtectedSettingsProfileRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_god-mode': typeof GodModeRouteRouteWithChildren
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/request-password-reset': typeof RequestPasswordResetRoute
  '/reset-password': typeof ResetPasswordRoute
  '/verify-email': typeof VerifyEmailRoute
  '/_god-mode/god-mode': typeof GodModeGodModeRoute
  '/_protected/dashboard': typeof ProtectedDashboardRoute
  '/_protected/settings/profile': typeof ProtectedSettingsProfileRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/register'
    | '/request-password-reset'
    | '/reset-password'
    | '/verify-email'
    | '/god-mode'
    | '/dashboard'
    | '/settings/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/register'
    | '/request-password-reset'
    | '/reset-password'
    | '/verify-email'
    | '/god-mode'
    | '/dashboard'
    | '/settings/profile'
  id:
    | '__root__'
    | '/'
    | '/_god-mode'
    | '/_protected'
    | '/login'
    | '/register'
    | '/request-password-reset'
    | '/reset-password'
    | '/verify-email'
    | '/_god-mode/god-mode'
    | '/_protected/dashboard'
    | '/_protected/settings/profile'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GodModeRouteRoute: typeof GodModeRouteRouteWithChildren
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  RequestPasswordResetRoute: typeof RequestPasswordResetRoute
  ResetPasswordRoute: typeof ResetPasswordRoute
  VerifyEmailRoute: typeof VerifyEmailRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GodModeRouteRoute: GodModeRouteRouteWithChildren,
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  RequestPasswordResetRoute: RequestPasswordResetRoute,
  ResetPasswordRoute: ResetPasswordRoute,
  VerifyEmailRoute: VerifyEmailRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_god-mode",
        "/_protected",
        "/login",
        "/register",
        "/request-password-reset",
        "/reset-password",
        "/verify-email"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_god-mode": {
      "filePath": "_god-mode/route.tsx",
      "children": [
        "/_god-mode/god-mode"
      ]
    },
    "/_protected": {
      "filePath": "_protected/route.tsx",
      "children": [
        "/_protected/dashboard",
        "/_protected/settings/profile"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/request-password-reset": {
      "filePath": "request-password-reset.tsx"
    },
    "/reset-password": {
      "filePath": "reset-password.tsx"
    },
    "/verify-email": {
      "filePath": "verify-email.tsx"
    },
    "/_god-mode/god-mode": {
      "filePath": "_god-mode/god-mode.tsx",
      "parent": "/_god-mode"
    },
    "/_protected/dashboard": {
      "filePath": "_protected/dashboard.tsx",
      "parent": "/_protected"
    },
    "/_protected/settings/profile": {
      "filePath": "_protected/settings/profile.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
