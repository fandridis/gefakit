/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type OrganizationsInvitationStatus = "accepted" | "declined" | "expired" | "pending";

export type OrganizationsMembershipRole = "admin" | "member" | "owner";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface AuthEmailVerification {
  created_at: Generated<Timestamp>;
  expires_at: Timestamp;
  id: Generated<number>;
  identifier: string;
  updated_at: Generated<Timestamp>;
  user_id: number;
  value: string;
}

export interface AuthOauthAccount {
  created_at: Generated<Timestamp>;
  id: Generated<number>;
  provider: string;
  provider_user_id: string;
  updated_at: Generated<Timestamp>;
  user_id: number;
}

export interface AuthOtpCode {
  created_at: Generated<Timestamp>;
  expires_at: Timestamp;
  hashed_code: string;
  id: Generated<number>;
  user_id: number;
}

export interface AuthPasswordResetToken {
  created_at: Generated<Timestamp>;
  expires_at: Timestamp;
  hashed_token: string;
  id: Generated<number>;
  user_id: number;
}

export interface AuthSession {
  active_organization_id: number | null;
  expires_at: Timestamp;
  id: string;
  impersonator_user_id: number | null;
  user_id: number;
}

export interface AuthUser {
  created_at: Generated<Timestamp>;
  email: string;
  email_verified: Generated<boolean>;
  id: Generated<number>;
  password_hash: string;
  role: Generated<string>;
  stripe_customer_id: string | null;
  username: string;
}

export interface CoreNotification {
  action_url: string | null;
  created_at: Generated<Timestamp>;
  expires_at: Timestamp | null;
  id: Generated<Int8>;
  read_at: Timestamp | null;
  template_key: string;
  template_variables: Json | null;
  type: string;
  user_id: number;
}

export interface CoreSubscription {
  cancel_at_period_end: Generated<boolean>;
  created_at: Generated<Timestamp>;
  current_period_end: Timestamp;
  current_period_start: Timestamp;
  id: Generated<number>;
  organization_id: number | null;
  status: string;
  stripe_customer_id: string;
  stripe_price_id: string;
  stripe_subscription_id: string;
  updated_at: Generated<Timestamp>;
  user_id: number | null;
}

export interface CoreTodo {
  author_id: number;
  completed: Generated<boolean>;
  created_at: Generated<Timestamp>;
  description: string | null;
  due_date: Timestamp | null;
  id: Generated<number>;
  title: string;
}

export interface OrganizationsInvitation {
  created_at: Generated<Timestamp>;
  email: string;
  expires_at: Timestamp;
  id: Generated<number>;
  invited_by_user_id: number | null;
  organization_id: number;
  role: OrganizationsMembershipRole;
  status: Generated<OrganizationsInvitationStatus>;
  token: string;
  updated_at: Generated<Timestamp>;
}

export interface OrganizationsMembership {
  created_at: Generated<Timestamp>;
  is_default: Generated<boolean>;
  organization_id: number;
  role: OrganizationsMembershipRole;
  updated_at: Generated<Timestamp>;
  user_id: number;
}

export interface OrganizationsOrganization {
  created_at: Generated<Timestamp>;
  id: Generated<number>;
  name: string;
  stripe_customer_id: string | null;
  updated_at: Generated<Timestamp>;
}

export interface DB {
  "auth.email_verifications": AuthEmailVerification;
  "auth.oauth_accounts": AuthOauthAccount;
  "auth.otp_codes": AuthOtpCode;
  "auth.password_reset_tokens": AuthPasswordResetToken;
  "auth.sessions": AuthSession;
  "auth.users": AuthUser;
  "core.notifications": CoreNotification;
  "core.subscriptions": CoreSubscription;
  "core.todos": CoreTodo;
  "organizations.invitations": OrganizationsInvitation;
  "organizations.memberships": OrganizationsMembership;
  "organizations.organizations": OrganizationsOrganization;
}
